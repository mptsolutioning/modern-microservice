services:
  user-service:
    build:
      context: ./services/user-service
      dockerfile: Dockerfile.dev
    networks:
      - app-network
    volumes:
      - ./services/user-service:/app
      - /app/node_modules
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - PORT=3001
      - MONGODB_URI=mongodb://${MONGO_ROOT_USERNAME}:${MONGO_ROOT_PASSWORD}@user-service-db:27017/users?authSource=admin
      - REDIS_URI=redis://user-service-cache:6379
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - GITHUB_CLIENT_ID=${GITHUB_CLIENT_ID}
      - GITHUB_CLIENT_SECRET=${GITHUB_CLIENT_SECRET}
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      user-service-db:
        condition: service_healthy
      user-service-cache:
        condition: service_started
      jaeger:
        condition: service_started

  user-service-db:
    image: mongo:latest
    ports:
      - "27017:27017"
    volumes:
      - user-service-data:/data/db
      - ./services/user-service/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=${MONGO_DB}
    command: [ "mongod", "--auth", "--bind_ip_all", "--wiredTigerCacheSizeGB", "1" ]
    healthcheck:
      test: mongosh --host localhost --username root --password example --authenticationDatabase admin --eval "db.adminCommand('ping')"
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  user-service-cache:
    image: redis:alpine
    ports:
      - "6379:6379"
    networks:
      - app-network

  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "14250:14250"
      - "14268:14268"
      - "14269:14269"
      - "9411:9411"

  product-service:
    build:
      context: ./services/product-service
      dockerfile: Dockerfile.dev
    networks:
      - app-network
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=development
      - PORT=3002
      - MONGODB_URI=mongodb://${MONGO_ROOT_USERNAME}:${MONGO_ROOT_PASSWORD}@product-service-db:27017/products?authSource=admin
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      product-service-db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  product-service-db:
    image: mongo:latest
    volumes:
      - product-service-data:/data/db
      - ./services/product-service/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=${MONGO_DB}
    command: [ "mongod", "--auth", "--bind_ip_all", "--wiredTigerCacheSizeGB", "1" ]
    healthcheck:
      test: mongosh --host localhost --username root --password example --authenticationDatabase admin --eval "db.adminCommand('ping')"
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile.dev
    networks:
      - app-network
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - JWT_SECRET=${JWT_SECRET}
      - USER_SERVICE_URL=http://user-service:3001
      - PRODUCT_SERVICE_URL=http://product-service:3002
    depends_on:
      product-service:
        condition: service_started
      user-service:
        condition: service_started

volumes:
  user-service-data:
  product-service-data:

networks:
  app-network:
    driver: bridge
